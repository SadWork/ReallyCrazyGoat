#include "bits/stdc++.h"

using namespace std;

template<typename T>
istream &operator>>(istream &is, vector<T> &v) {
    for (auto &i: v) is >> i;
    return is;
}

template<typename T>
ostream &operator<<(ostream &os, vector<T> v) {
    for (auto &i: v) os << i << ' ';
    return os;
}

long double find_det(int idx, vector<vector<long double>> mat, vector<long double> b){
    int n = (int) b.size();

    long double ans = 0;
    vector<int> p(n);
    iota(p.begin(), p.end(), 0);
    int sign = 1;
    do {
        long double cur = 1;
        for(int i = 0, j = 0; i < n; i++){
            if(idx == -1){
                cur *= mat[i][p[j++]];
            } else {
                if(p[j] == idx)
                    cur *= b[i];
                else
                    cur *= mat[i][p[j]];
                j++;
            }
        }
        ans += (cur * sign);
        sign = (sign == 1 ? -1 : 1);
    } while(next_permutation(p.begin(), p.end()));
    return ans;
}


void solve(){
    int n;
    cin >> n;
    
    vector<vector<long double>> mat(n, vector<long double> (n));
    for(auto &x : mat)
        cin >> x;
        
    vector<long double> b(n);
    cin >> b;
    
    long double base = find_det(-1, mat, b);
    
    vector<long double> dets(n);
    for(int i = 0; i < n; i++)
        dets[i] = find_det(i, mat, b);
        
    vector<long double> alphas(n);
    for(int i = 0; i < n; i++)
        alphas[i] = dets[i] / base;
        
    cout << alphas << '\n';
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);
    solve();
}
